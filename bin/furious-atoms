# Standard package
import sys
import os
import getopt
import time

# 3rd party package
import PySide2
from PySide2 import QtCore
from PySide2 import QtGui
from PySide2 import QtWidgets
from PySide2.QtCore import Qt
from fury.window import enable_stereo

# Local package
import furiousatoms
from furiousatoms import io
from furiousatoms.constants import APP_NAME
from furiousatoms.mainwindow import FuriousAtomsApp


_dirname = os.path.dirname(PySide2.__file__)
_plugin_path = os.path.join(_dirname, 'plugins', 'platforms')
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = _plugin_path
os.environ['QT_DEBUG_PLUGINS '] = '1'


def usage():
    """Help for user"""
    print(r"""
        User Interface usage:
        --------------------

        ./furious-atoms

        Command line: ./furious-atoms [option[value]] my_file
        Example: ./furious-atoms.py my_file.dat

        Options:
        --------

        -h           Display this message
        """)


def start_gui(app_folder=None, files=None):
    """Start Furious Atoms app

    Parameters
    -----------
    app_folder : str
        folder where the application is running.
        All files like config and log will be created
        on this folder
    """
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_ShareOpenGLContexts)
    QtWidgets.QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)
    app = QtWidgets.QApplication(sys.argv)
    app.setApplicationDisplayName(APP_NAME)
    app.setApplicationVersion(furiousatoms.__version__)
    app.setStyle('Fusion')

    palette_enabled = True
    if palette_enabled:
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Window, QtGui.QColor(153,53,53))
        palette.setColor(QtGui.QPalette.WindowText, Qt.black)
        palette.setColor(QtGui.QPalette.Base, QtGui.QColor(100,100,100))
        palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53,53,153))
        palette.setColor(QtGui.QPalette.ToolTipBase, Qt.white)
        palette.setColor(QtGui.QPalette.ToolTipText, Qt.white)
        palette.setColor(QtGui.QPalette.Text, Qt.black)
        palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53,153,53))
        # palette.setColor(QtGui.QPalette.ButtonText, Qt.white)
        palette.setColor(QtGui.QPalette.BrightText, Qt.red)
        # palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(142,45,197).lighter())
        # palette.setColor(QtGui.QPalette.HighlightedText, Qt.black)
        palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Text, Qt.darkGray)
        palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, Qt.darkGray)

        QtWidgets.QApplication.setPalette(palette)
        # app.setPalette(palette)

    # Start the Splashscreen
    pix = QtGui.QPixmap(io.get_resources_file("splash.png"))
    splash = QtWidgets.QSplashScreen(pix)
    splash.show()
    app.processEvents()
    splash.showMessage("Furious Atoms loading...",
                       QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
    time.sleep(2)
    # Init interface
    win = FuriousAtomsApp(app_path=app_folder)
    win.setWindowTitle("{0} version {1}".format(APP_NAME,
                                                furiousatoms.__version__))

    win.showMaximized()
    # win.showMinimized()
    # win.showNormal()
    splash.finish(win)

    return app.exec_()


def parse_arguments():
    """Parse arguments."""
    try:
        options, args = getopt.getopt(sys.argv[1:], 'h:')
    except getopt.GetoptError:
        # print help information and exit
        print("Argument error in {0}".format(str(sys.argv[1:])))
        usage()
        sys.exit(2)

    # Todo, list all files to open
    for args in args:
        pass

    for opt, val in options:
        if opt == '-h':
            usage()
            sys.exit()

    return


if __name__ == '__main__':
    app_path = io.get_application_path()
    if __file__:
        app_path = os.path.dirname(os.path.realpath(__file__))

    files = parse_arguments()
    sys.exit(start_gui(app_path, files))
